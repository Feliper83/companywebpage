// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Language {
  code String @id @db.Char(2)
  name String

  sections  SectionTranslation[]
  services  ServiceTranslation[]
  projects  ProjectTranslation[]
  pricing   PricingPlanTranslation[]
  blogPosts BlogPostTranslation[]
  abouts    AboutSectionTranslation[]

  @@map("language")
}

model Section {
  id            Int    @id @default(autoincrement())
  slug          String @unique
  display_order Int

  translations SectionTranslation[]
  images       ContentImage[]       @relation("SectionImages")

  @@map("section")
}

model SectionTranslation {
  id         Int      @id @default(autoincrement())
  section    Section  @relation(fields: [section_id], references: [id], onDelete: Cascade)
  section_id Int
  language   Language @relation(fields: [lang_code], references: [code])
  lang_code  String   @db.Char(2)

  title       String
  description String
  cta_text    String?

  @@unique([section_id, lang_code])
  @@map("section_translation")
}

model AboutSection {
  id            Int    @id @default(autoincrement())
  slug          String @unique
  display_order Int

  translations AboutSectionTranslation[]
  images       ContentImage[]            @relation("AboutSectionImages")

  @@map("about_section")
}

model AboutSectionTranslation {
  id               Int          @id @default(autoincrement())
  aboutSection     AboutSection @relation(fields: [about_section_id], references: [id], onDelete: Cascade)
  about_section_id Int
  language         Language     @relation(fields: [lang_code], references: [code])
  lang_code        String       @db.Char(2)

  title   String
  content String

  @@unique([about_section_id, lang_code])
  @@map("about_section_translation")
}

model Service {
  id            Int     @id @default(autoincrement())
  slug          String  @unique
  icon_path     String?
  display_order Int

  translations ServiceTranslation[]

  @@map("service")
}

model ServiceTranslation {
  id         Int      @id @default(autoincrement())
  service    Service  @relation(fields: [service_id], references: [id], onDelete: Cascade)
  service_id Int
  language   Language @relation(fields: [lang_code], references: [code])
  lang_code  String   @db.Char(2)

  name    String
  summary String
  details String?

  @@unique([service_id, lang_code])
  @@map("service_translation")
}

model Project {
  id            Int       @id @default(autoincrement())
  slug          String    @unique
  image_path    String?
  start_date    DateTime?
  end_date      DateTime?
  display_order Int

  translations ProjectTranslation[]
  images       ContentImage[]       @relation("ProjectImages")

  @@map("project")
}

model ProjectTranslation {
  id         Int      @id @default(autoincrement())
  project    Project  @relation(fields: [project_id], references: [id], onDelete: Cascade)
  project_id Int
  language   Language @relation(fields: [lang_code], references: [code])
  lang_code  String   @db.Char(2)

  title       String
  description String

  @@unique([project_id, lang_code])
  @@map("project_translation")
}

model PricingPlan {
  id            Int    @id @default(autoincrement())
  slug          String @unique
  display_order Int

  translations PricingPlanTranslation[]

  @@map("pricing_plan")
}

model PricingPlanTranslation {
  id              Int         @id @default(autoincrement())
  pricing_plan    PricingPlan @relation(fields: [pricing_plan_id], references: [id], onDelete: Cascade)
  pricing_plan_id Int
  language        Language    @relation(fields: [lang_code], references: [code])
  lang_code       String      @db.Char(2)

  name        String
  description String?
  price_from  Float?

  @@unique([pricing_plan_id, lang_code])
  @@map("pricing_plan_translation")
}

model ContactMessage {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  subject     String?
  message     String
  received_at DateTime @default(now())

  @@map("contact_message")
}

model ContentImage {
  id               Int           @id @default(autoincrement())
  section          Section?      @relation("SectionImages", fields: [section_id], references: [id], onDelete: Cascade)
  section_id       Int?
  project          Project?      @relation("ProjectImages", fields: [project_id], references: [id], onDelete: Cascade)
  project_id       Int?
  aboutSection     AboutSection? @relation("AboutSectionImages", fields: [about_section_id], references: [id], onDelete: Cascade)
  about_section_id Int?
  blogPost         BlogPost?     @relation("BlogPostImages", fields: [blog_post_id], references: [id], onDelete: Cascade)
  blog_post_id     Int?
  image_path       String
  caption          String?
  display_order    Int?

  @@map("content_image")
}

model BlogPost {
  id            Int                   @id @default(autoincrement())
  slug          String                @unique
  author        String?
  published_at  DateTime              @default(now())
  display_order Int
  translations  BlogPostTranslation[]
  images        ContentImage[]        @relation("BlogPostImages")

  @@map("blog_post")
}

model BlogPostTranslation {
  id           Int       @id @default(autoincrement())
  blog_post    BlogPost  @relation(fields: [blog_post_id], references: [id], onDelete: Cascade)
  blog_post_id Int
  language     Language? @relation(fields: [lang_code], references: [code])
  lang_code    String    @db.Char(2)

  title   String
  content String

  @@unique([blog_post_id, lang_code])
  @@map("blog_post_translation")
}

model Benefit {
  id           Int                  @id @default(autoincrement())
  translations BenefitTranslation[]

  @@map("benefit")
}

model BenefitTranslation {
  id         Int    @id @default(autoincrement())
  benefit_id Int
  language   String @db.VarChar(5) // 'es', 'en', etc.
  name       String @db.VarChar(255)

  benefit Benefit @relation(fields: [benefit_id], references: [id])

  @@unique([benefit_id, language]) // Evita duplicados por idioma
  @@map("benefit_translation")
}

model Job {
  id             Int              @id @default(autoincrement())
  location       String           @db.VarChar(100)
  skills         String[]         @db.Text
  image          String           @db.VarChar(255)
  translations   JobTranslation[]
  JobApplication JobApplication[]

  @@map("job")
}

model JobTranslation {
  id         Int    @id @default(autoincrement())
  job_id     Int
  language   String @db.VarChar(5)
  title      String @db.VarChar(255)
  experience String @db.VarChar(100)

  job Job @relation(fields: [job_id], references: [id])

  @@unique([job_id, language])
  @@map("job_translation")
}

model JobApplication {
  id          Int     @id @default(autoincrement())
  name        String
  email       String
  phone       String
  coverLetter String?
  resumeUrl   String? // aqu√≠ puedes guardar la ruta/URL del CV subido

  job_id Int
  job    Job @relation(fields: [job_id], references: [id])

  createdAt DateTime @default(now())

  @@map("job_application")
}

model Company {
  id         Int      @id @default(autoincrement())
  email      String?
  phone      String?
  website    String?
  address    String?
  logo_url   String?
  facebook   String?
  twitter    String?
  linkedin   String?
  instagram  String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  translations CompanyTranslation[]

  @@map("company")
}

model CompanyTranslation {
  id         Int     @id @default(autoincrement())
  company    Company @relation(fields: [company_id], references: [id], onDelete: Cascade)
  company_id Int
  language   String  @db.Char(2) // 'es', 'en', etc.

  name        String
  slogan      String?
  description String?

  @@unique([company_id, language])
  @@map("company_translation")
}
